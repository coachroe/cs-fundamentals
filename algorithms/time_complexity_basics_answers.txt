1) What is time complexity and what is its relation to algorithms?
  A: a function that estimates the time it takes for a program to execute.  It is related to algorithms in that you want to lower time complexity as much as possible

-----

2) What is runtime?
  A: Physical time duration of an algorithm

-----

3) How is the runtime of an algorithm calculated?
  A: Typically through Big O notation (i.e. O(1), O(n), etc...).  You add up how many instructions the algo will execute compared to it's input then simplify it into a "Big O" expression of complexity

-----

4) Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
  A:
    1) constant growth rate [ O(1) ]
    2) logarithmic growth rate [ O(log n) ]
    3) linear growth rate [ O(n) ]
    4) log-linear growth rate [ O(n log n) ]
    5) quadratic growth rate [ O(n^2) ]
    6) exponential growth rate [ O(2^n) ]
    7) * factorial growth rate [ O(n!) ]



-----

5) Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
  A: constant growth rate O(1)
    To answer the question of who is the best basketball player of all-time, the function that we would create would RETURN 'Michael Jordan', always
      (I'm from Chicago, so I'm biased)

-----

6) Determine the time complexity of the following snippet of code. It is commonly known as a linear search.
  A: O(n)

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

-----

7) Determine the time complexity of the following snippet of code.
  A: O(n^2)

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

-----

8) Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.
  A: O(2^n)

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

-----

9) Out of the code snippets you just saw, which is the most time efficient?
  A: Question #6 due to O(n) complexity compared to O(n^2) and O(2^n) of #7 and #8
