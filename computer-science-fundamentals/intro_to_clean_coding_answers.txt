1)In your own words, explain what clean code is and why it is important.

A: Clean code is important for 3 main reasons:
    1) To improve readability and understanding of other developers working on the code in a team environment
    2) For individual code management so you have a good understanding of what the code does
    3) For abstraction and single use functions, so you only have to make changes in 1 spot.

    In general, clean code is readable, each function has a single use, and never repeat yourself in the code

-----

2) Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A: Topic: the auto-pilot flight system on an airplane

  Similar to the Toyota example, flight systems are responsible for the safety of the plane.  Clearly, if the code was buggy or not explicit it could create a whole host of problems that would lead to unacceptable risk of the plane.

-----

3) Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

-- ORIGINAL --
FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

A: No.  Way too many comments and variables not explicit

-- REFACTORED --
FUNCTION do(temperature, scale)
 IF scale = "F" THEN
 SET celsius to (temperature−32) * (5/9)
 PRINT celsius
 ELSE IF scale = "C" THEN
 SET fahrenheit to temperature * 1.8000 + 32.00
 PRINT fahrenheit
 END IF
END FUNCTION

-----

4) Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

-- ORIGINAL --
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

A: Yes, this is clean code

-----

5) Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

-- ORIGINAL --
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

-- REFACTORED --
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
 PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
  CALL getPayment RETURNING amount
    IF paymentType = 'CASH' THEN
      PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
    ELSE IF paymentType = 'CREDIT CARD' THEN
      PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
    END IF
  END getPayment
END FUNCTION

----

b. The following function checks out a book if there are no issues with the guest's account.

-- ORIGINAL --
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

-- REFACTORED --
FUNCTION checkoutBook(book, guest)
  IF guest.accountActive THEN
    APPEND book to guest.books
    SET book.status to "Checked Out"
    PRINT "Your books have been issued."
  END IF
  ELSE
      PRINT "Unable to check out book."
  END IF
END FUNCTION


FUNCTION guest()
  CALL accountActive THEN
    IF NOT(guest.hasOverdueBooks) THEN
      IF guest.outstandingFees = 0 THEN
    RETURN true
    ELSE IF RETURN false
    END IF
END FUNCTION


----

c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

-- ORIGINAL --
CLASS BankAccount
 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION
END

-- REFACTORED --

Honestly, this one looks good to me.  I suppose you could abstract balance out into it's own class and call it, but each function has a single purpose below.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION
END


-----

6) Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

var array = [3, 3, 4];

var check = 0;
for (var i=0; i<array.length; i++) {
    check += array[i]
} if (Math.sqrt(check) % 1 === 0) {
    alert(Math.sqrt(check))
} else {
    alert(check)
}

-----

7) Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

var array = [1, 2, 3, 3];

var hasDup = array.some((val,i)=>{
  return array.indexOf(val)!=i
})

alert(hasDup)
