## Short Answer
1) What is a binary tree and what makes it unique to other trees?
  A: A binary tree is a tree data structure in which each node in the structure can have a maximum of two nodes.  This allows for easy searchability.

-----

2) What is a heuristic?
  A: a best guess

-----

3) What is another problem besides the shortest-path problem that requires the use of heuristics?
  A: Family trees/genealogy could use it to determine someone in the current days ancestry

-----

4) What is the difference between a depth-first search and a breadth-first search?
  A: A depth first search goes all the way down a single binary search tree branch until it reaches a leaf, then moves back up the branch to other leaves.
  A breadth first search looks at each pair in a binary search tree before descending down the branch

-----

5) Explain in your own words what an undirected, a-cyclic, unweighted graph is.
  A: A graph that can travel in any direction, has long branches that don't loop, and doesn't estimate the cost of travel between Nodes.

-----

6) What kind of graph is a binary search tree?
  A: Undirected, a-cyclic, unweighted graph

-----

## Programming Questions

1) Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

class BinarySearchTree {

  constructor() {
    this.root = null;
  }

  insertNode(val) {
    var node = {
      data: val,
      left: null,
      right: null
    };

    var currentNode;

    if (!this.root) {
      this.root = node;
    } else {
      currentNode = this.root;
      while (currentNode) {
        if (val < currentNode.data) {
          if (!currentNode.left) {
            currentNode.left = node;
            break;
          } else {
            currentNode = currentNode.left;
          }
        } else if (val > currentNode.data) {
          if (!currentNode.right) {
            currentNode.right = node;
            break;
          } else {
            currentNode = currentNode.right;
          }
        }
          break;
        }
      }
    }
}

var BST = new BinarySearchTree();

BST.insertNode(1);
BST.insertNode(2);
BST.insertNode(3);
BST.insertNode(4);
BST.insertNode(5);
BST.insertNode(6);
BST.insertNode(7);
BST.insertNode(8);
BST.insertNode(9);
BST.insertNode(10);

console.log(BST);

var searchBST = function(node){
   if(!node){
     return true;
  }

  if(node.left != null && node.left.value > node.value){
    return false;
  }

  if(node.right !=null && node.right.value < node.value) {
    return false;
  }

  if(!searchBST(node.left) || !searchBST(node.right)) {
    return false;
  }

  return true;
}


console.log(searchBST(10))

-----

2) Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.
