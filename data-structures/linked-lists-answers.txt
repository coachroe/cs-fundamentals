## Short Answer

1) What are some pros and cons of using linked lists instead of arrays?

Pros:
Uses less memory
No empty placeholders
Each node is independent

Cons:
it can become inefficient to access elements since they may be stored anywhere
You have to access elements form the head node

-----

2) Come up with a real world example of a linked list.

A: My mentor shared an example with me of updating an old "keypad" for use at payment stations at gas stations.
The keypads were built in the 80's and only had 8mb of memory to use.  To add new features to the keypad they used linked lists instead of arrays since they had memory constraints to work within.

-----

## Programming Questions

1) The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.

-- Original --
FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 SET current.next to node
END IF
END FUNCTION

-- Updated --

FUNCTION push(headNode, element)
CREATE node
SET node.value TO element
SET node.head TO headNode
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 SET current.next to node
END IF
END FUNCTION

Wasn't passing in the headNode value or setting it upon node creation


-----

2) Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

class LinkedList {
    constructor(value) {
        this.head = null;
        this.length = 0;
        this.addToHead(value);
    }

    addToHead(value) {
        const newNode = { value };
        newNode.next = this.head;
        this.head = newNode;
        this.length++;
        return this;
    }
}

const list = new LinkedList('a')
    .addToHead('c')
    .addToHead('d')
    .addToHead('d')
    .addToHead('a');


const removeDuplicates = function(list) {
        prev = this.head;
        current = this.head.next;
        hash = {};
        while(current != null) {
            if(!hash[current.data]) {
                hash[current.data] = true;
            } else {
                prev.next = current.next;
                this.length--;
            }
            prev = current;
            current = current.next;
        }
    }

-----

3) Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

class LinkedList {
    constructor(value) {
        this.head = null;
        this.length = 0;
        this.addToHead(value);
    }

    addToHead(value) {
        const newNode = { value };
        newNode.next = this.head;
        this.head = newNode;
        this.length++;
        return this;
    }
}

const list = new LinkedList('a')
    .addToHead('b')
    .addToHead('c')
    .addToHead('d');


var reverseLinkedList = function(list) {
  var node = list;
  var previous = null;

  while(node) {
    var save = node.next;
    node.next = previous;
    previous = node;
    node = save;
  }
  return previous;
}

alert(reverseLinkedList(list))
